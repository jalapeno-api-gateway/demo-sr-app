// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package requestservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ApiGatewayClient is the client API for ApiGateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiGatewayClient interface {
	GetNode(ctx context.Context, in *NodeIds, opts ...grpc.CallOption) (*Nodes, error)
	GetNodes(ctx context.Context, in *NodeIds, opts ...grpc.CallOption) (ApiGateway_GetNodesClient, error)
}

type apiGatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewApiGatewayClient(cc grpc.ClientConnInterface) ApiGatewayClient {
	return &apiGatewayClient{cc}
}

func (c *apiGatewayClient) GetNode(ctx context.Context, in *NodeIds, opts ...grpc.CallOption) (*Nodes, error) {
	out := new(Nodes)
	err := c.cc.Invoke(ctx, "/requestservice.ApiGateway/GetNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayClient) GetNodes(ctx context.Context, in *NodeIds, opts ...grpc.CallOption) (ApiGateway_GetNodesClient, error) {
	stream, err := c.cc.NewStream(ctx, &ApiGateway_ServiceDesc.Streams[0], "/requestservice.ApiGateway/GetNodes", opts...)
	if err != nil {
		return nil, err
	}
	x := &apiGatewayGetNodesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ApiGateway_GetNodesClient interface {
	Recv() (*Node, error)
	grpc.ClientStream
}

type apiGatewayGetNodesClient struct {
	grpc.ClientStream
}

func (x *apiGatewayGetNodesClient) Recv() (*Node, error) {
	m := new(Node)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ApiGatewayServer is the server API for ApiGateway service.
// All implementations must embed UnimplementedApiGatewayServer
// for forward compatibility
type ApiGatewayServer interface {
	GetNode(context.Context, *NodeIds) (*Nodes, error)
	GetNodes(*NodeIds, ApiGateway_GetNodesServer) error
	mustEmbedUnimplementedApiGatewayServer()
}

// UnimplementedApiGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedApiGatewayServer struct {
}

func (UnimplementedApiGatewayServer) GetNode(context.Context, *NodeIds) (*Nodes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNode not implemented")
}
func (UnimplementedApiGatewayServer) GetNodes(*NodeIds, ApiGateway_GetNodesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetNodes not implemented")
}
func (UnimplementedApiGatewayServer) mustEmbedUnimplementedApiGatewayServer() {}

// UnsafeApiGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiGatewayServer will
// result in compilation errors.
type UnsafeApiGatewayServer interface {
	mustEmbedUnimplementedApiGatewayServer()
}

func RegisterApiGatewayServer(s grpc.ServiceRegistrar, srv ApiGatewayServer) {
	s.RegisterService(&ApiGateway_ServiceDesc, srv)
}

func _ApiGateway_GetNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServer).GetNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/requestservice.ApiGateway/GetNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServer).GetNode(ctx, req.(*NodeIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGateway_GetNodes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NodeIds)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApiGatewayServer).GetNodes(m, &apiGatewayGetNodesServer{stream})
}

type ApiGateway_GetNodesServer interface {
	Send(*Node) error
	grpc.ServerStream
}

type apiGatewayGetNodesServer struct {
	grpc.ServerStream
}

func (x *apiGatewayGetNodesServer) Send(m *Node) error {
	return x.ServerStream.SendMsg(m)
}

// ApiGateway_ServiceDesc is the grpc.ServiceDesc for ApiGateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiGateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "requestservice.ApiGateway",
	HandlerType: (*ApiGatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNode",
			Handler:    _ApiGateway_GetNode_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetNodes",
			Handler:       _ApiGateway_GetNodes_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "request-service.proto",
}
