// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: requestservice.proto

package requestservice

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TopologyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys          []string `protobuf:"bytes,1,rep,name=keys" json:"keys,omitempty"`
	PropertyNames []string `protobuf:"bytes,2,rep,name=propertyNames" json:"propertyNames,omitempty"`
}

func (x *TopologyRequest) Reset() {
	*x = TopologyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_requestservice_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyRequest) ProtoMessage() {}

func (x *TopologyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_requestservice_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyRequest.ProtoReflect.Descriptor instead.
func (*TopologyRequest) Descriptor() ([]byte, []int) {
	return file_requestservice_proto_rawDescGZIP(), []int{0}
}

func (x *TopologyRequest) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *TopologyRequest) GetPropertyNames() []string {
	if x != nil {
		return x.PropertyNames
	}
	return nil
}

type TelemetryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ipv4Addresses []string `protobuf:"bytes,1,rep,name=ipv4addresses" json:"ipv4addresses,omitempty"`
	PropertyNames []string `protobuf:"bytes,2,rep,name=propertyNames" json:"propertyNames,omitempty"`
}

func (x *TelemetryRequest) Reset() {
	*x = TelemetryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_requestservice_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetryRequest) ProtoMessage() {}

func (x *TelemetryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_requestservice_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetryRequest.ProtoReflect.Descriptor instead.
func (*TelemetryRequest) Descriptor() ([]byte, []int) {
	return file_requestservice_proto_rawDescGZIP(), []int{1}
}

func (x *TelemetryRequest) GetIpv4Addresses() []string {
	if x != nil {
		return x.Ipv4Addresses
	}
	return nil
}

func (x *TelemetryRequest) GetPropertyNames() []string {
	if x != nil {
		return x.PropertyNames
	}
	return nil
}

type LSNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LsNodes []*LSNode `protobuf:"bytes,1,rep,name=lsNodes" json:"lsNodes,omitempty"`
}

func (x *LSNodeResponse) Reset() {
	*x = LSNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_requestservice_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LSNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LSNodeResponse) ProtoMessage() {}

func (x *LSNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_requestservice_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LSNodeResponse.ProtoReflect.Descriptor instead.
func (*LSNodeResponse) Descriptor() ([]byte, []int) {
	return file_requestservice_proto_rawDescGZIP(), []int{2}
}

func (x *LSNodeResponse) GetLsNodes() []*LSNode {
	if x != nil {
		return x.LsNodes
	}
	return nil
}

type LSLinkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LsLinks []*LSLink `protobuf:"bytes,1,rep,name=lsLinks" json:"lsLinks,omitempty"`
}

func (x *LSLinkResponse) Reset() {
	*x = LSLinkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_requestservice_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LSLinkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LSLinkResponse) ProtoMessage() {}

func (x *LSLinkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_requestservice_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LSLinkResponse.ProtoReflect.Descriptor instead.
func (*LSLinkResponse) Descriptor() ([]byte, []int) {
	return file_requestservice_proto_rawDescGZIP(), []int{3}
}

func (x *LSLinkResponse) GetLsLinks() []*LSLink {
	if x != nil {
		return x.LsLinks
	}
	return nil
}

type LSPrefixResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LsPrefixes []*LSPrefix `protobuf:"bytes,1,rep,name=lsPrefixes" json:"lsPrefixes,omitempty"`
}

func (x *LSPrefixResponse) Reset() {
	*x = LSPrefixResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_requestservice_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LSPrefixResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LSPrefixResponse) ProtoMessage() {}

func (x *LSPrefixResponse) ProtoReflect() protoreflect.Message {
	mi := &file_requestservice_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LSPrefixResponse.ProtoReflect.Descriptor instead.
func (*LSPrefixResponse) Descriptor() ([]byte, []int) {
	return file_requestservice_proto_rawDescGZIP(), []int{4}
}

func (x *LSPrefixResponse) GetLsPrefixes() []*LSPrefix {
	if x != nil {
		return x.LsPrefixes
	}
	return nil
}

type LSSRv6SIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LsSRv6SIDs []*LSSRv6SID `protobuf:"bytes,1,rep,name=lsSRv6SIDs" json:"lsSRv6SIDs,omitempty"`
}

func (x *LSSRv6SIDResponse) Reset() {
	*x = LSSRv6SIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_requestservice_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LSSRv6SIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LSSRv6SIDResponse) ProtoMessage() {}

func (x *LSSRv6SIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_requestservice_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LSSRv6SIDResponse.ProtoReflect.Descriptor instead.
func (*LSSRv6SIDResponse) Descriptor() ([]byte, []int) {
	return file_requestservice_proto_rawDescGZIP(), []int{5}
}

func (x *LSSRv6SIDResponse) GetLsSRv6SIDs() []*LSSRv6SID {
	if x != nil {
		return x.LsSRv6SIDs
	}
	return nil
}

type TelemetryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TelemetryData []*TelemetryData `protobuf:"bytes,1,rep,name=telemetryData" json:"telemetryData,omitempty"`
}

func (x *TelemetryResponse) Reset() {
	*x = TelemetryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_requestservice_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetryResponse) ProtoMessage() {}

func (x *TelemetryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_requestservice_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetryResponse.ProtoReflect.Descriptor instead.
func (*TelemetryResponse) Descriptor() ([]byte, []int) {
	return file_requestservice_proto_rawDescGZIP(), []int{6}
}

func (x *TelemetryResponse) GetTelemetryData() []*TelemetryData {
	if x != nil {
		return x.TelemetryData
	}
	return nil
}

type TelemetryData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ipv4Address             *string `protobuf:"bytes,1,req,name=ipv4address" json:"ipv4address,omitempty"`
	DataRate                *int64  `protobuf:"varint,2,opt,name=dataRate" json:"dataRate,omitempty"`
	PacketsSent             *int64  `protobuf:"varint,3,opt,name=packetsSent" json:"packetsSent,omitempty"`
	PacketsReceived         *int64  `protobuf:"varint,4,opt,name=packetsReceived" json:"packetsReceived,omitempty"`
	State                   *string `protobuf:"bytes,5,opt,name=state" json:"state,omitempty"`
	LastStateTransitionTime *int64  `protobuf:"varint,6,opt,name=lastStateTransitionTime" json:"lastStateTransitionTime,omitempty"`
}

func (x *TelemetryData) Reset() {
	*x = TelemetryData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_requestservice_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetryData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetryData) ProtoMessage() {}

func (x *TelemetryData) ProtoReflect() protoreflect.Message {
	mi := &file_requestservice_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetryData.ProtoReflect.Descriptor instead.
func (*TelemetryData) Descriptor() ([]byte, []int) {
	return file_requestservice_proto_rawDescGZIP(), []int{7}
}

func (x *TelemetryData) GetIpv4Address() string {
	if x != nil && x.Ipv4Address != nil {
		return *x.Ipv4Address
	}
	return ""
}

func (x *TelemetryData) GetDataRate() int64 {
	if x != nil && x.DataRate != nil {
		return *x.DataRate
	}
	return 0
}

func (x *TelemetryData) GetPacketsSent() int64 {
	if x != nil && x.PacketsSent != nil {
		return *x.PacketsSent
	}
	return 0
}

func (x *TelemetryData) GetPacketsReceived() int64 {
	if x != nil && x.PacketsReceived != nil {
		return *x.PacketsReceived
	}
	return 0
}

func (x *TelemetryData) GetState() string {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ""
}

func (x *TelemetryData) GetLastStateTransitionTime() int64 {
	if x != nil && x.LastStateTransitionTime != nil {
		return *x.LastStateTransitionTime
	}
	return 0
}

type LSNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key         *string                    `protobuf:"bytes,1,req,name=Key" json:"Key,omitempty"`
	ID          *string                    `protobuf:"bytes,2,opt,name=ID" json:"ID,omitempty"`
	RouterHash  *string                    `protobuf:"bytes,3,opt,name=RouterHash" json:"RouterHash,omitempty"`
	DomainID    *int64                     `protobuf:"varint,4,opt,name=DomainID" json:"DomainID,omitempty"`
	RouterIP    *string                    `protobuf:"bytes,5,opt,name=RouterIP" json:"RouterIP,omitempty"`
	PeerHash    *string                    `protobuf:"bytes,6,opt,name=PeerHash" json:"PeerHash,omitempty"`
	PeerIP      *string                    `protobuf:"bytes,7,opt,name=PeerIP" json:"PeerIP,omitempty"`
	PeerASN     *int32                     `protobuf:"varint,8,opt,name=PeerASN" json:"PeerASN,omitempty"`
	Timestamp   *string                    `protobuf:"bytes,9,opt,name=Timestamp" json:"Timestamp,omitempty"`
	IGPRouterID *string                    `protobuf:"bytes,10,opt,name=IGPRouterID" json:"IGPRouterID,omitempty"`
	ASN         *uint32                    `protobuf:"varint,11,opt,name=ASN" json:"ASN,omitempty"`
	MTID        []*MultiTopologyIdentifier `protobuf:"bytes,12,rep,name=MTID" json:"MTID,omitempty"`
	AreaID      *string                    `protobuf:"bytes,13,opt,name=AreaID" json:"AreaID,omitempty"`
	Protocol    *string                    `protobuf:"bytes,14,opt,name=Protocol" json:"Protocol,omitempty"`
	ProtocolID  *uint32                    `protobuf:"varint,15,opt,name=ProtocolID" json:"ProtocolID,omitempty"` // protobuf does not support uint8
	Name        *string                    `protobuf:"bytes,16,opt,name=Name" json:"Name,omitempty"`
	IsPrepolicy *bool                      `protobuf:"varint,17,opt,name=IsPrepolicy" json:"IsPrepolicy,omitempty"`
	IsAdjRIBIn  *bool                      `protobuf:"varint,18,opt,name=IsAdjRIBIn" json:"IsAdjRIBIn,omitempty"`
}

func (x *LSNode) Reset() {
	*x = LSNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_requestservice_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LSNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LSNode) ProtoMessage() {}

func (x *LSNode) ProtoReflect() protoreflect.Message {
	mi := &file_requestservice_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LSNode.ProtoReflect.Descriptor instead.
func (*LSNode) Descriptor() ([]byte, []int) {
	return file_requestservice_proto_rawDescGZIP(), []int{8}
}

func (x *LSNode) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *LSNode) GetID() string {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return ""
}

func (x *LSNode) GetRouterHash() string {
	if x != nil && x.RouterHash != nil {
		return *x.RouterHash
	}
	return ""
}

func (x *LSNode) GetDomainID() int64 {
	if x != nil && x.DomainID != nil {
		return *x.DomainID
	}
	return 0
}

func (x *LSNode) GetRouterIP() string {
	if x != nil && x.RouterIP != nil {
		return *x.RouterIP
	}
	return ""
}

func (x *LSNode) GetPeerHash() string {
	if x != nil && x.PeerHash != nil {
		return *x.PeerHash
	}
	return ""
}

func (x *LSNode) GetPeerIP() string {
	if x != nil && x.PeerIP != nil {
		return *x.PeerIP
	}
	return ""
}

func (x *LSNode) GetPeerASN() int32 {
	if x != nil && x.PeerASN != nil {
		return *x.PeerASN
	}
	return 0
}

func (x *LSNode) GetTimestamp() string {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return ""
}

func (x *LSNode) GetIGPRouterID() string {
	if x != nil && x.IGPRouterID != nil {
		return *x.IGPRouterID
	}
	return ""
}

func (x *LSNode) GetASN() uint32 {
	if x != nil && x.ASN != nil {
		return *x.ASN
	}
	return 0
}

func (x *LSNode) GetMTID() []*MultiTopologyIdentifier {
	if x != nil {
		return x.MTID
	}
	return nil
}

func (x *LSNode) GetAreaID() string {
	if x != nil && x.AreaID != nil {
		return *x.AreaID
	}
	return ""
}

func (x *LSNode) GetProtocol() string {
	if x != nil && x.Protocol != nil {
		return *x.Protocol
	}
	return ""
}

func (x *LSNode) GetProtocolID() uint32 {
	if x != nil && x.ProtocolID != nil {
		return *x.ProtocolID
	}
	return 0
}

func (x *LSNode) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *LSNode) GetIsPrepolicy() bool {
	if x != nil && x.IsPrepolicy != nil {
		return *x.IsPrepolicy
	}
	return false
}

func (x *LSNode) GetIsAdjRIBIn() bool {
	if x != nil && x.IsAdjRIBIn != nil {
		return *x.IsAdjRIBIn
	}
	return false
}

type LSLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key               *string                  `protobuf:"bytes,1,req,name=Key" json:"Key,omitempty"`
	ID                *string                  `protobuf:"bytes,2,opt,name=ID" json:"ID,omitempty"`
	RouterHash        *string                  `protobuf:"bytes,3,opt,name=RouterHash" json:"RouterHash,omitempty"`
	RouterIP          *string                  `protobuf:"bytes,4,opt,name=RouterIP" json:"RouterIP,omitempty"`
	DomainID          *int64                   `protobuf:"varint,5,opt,name=DomainID" json:"DomainID,omitempty"`
	PeerHash          *string                  `protobuf:"bytes,6,opt,name=PeerHash" json:"PeerHash,omitempty"`
	PeerIP            *string                  `protobuf:"bytes,7,opt,name=PeerIP" json:"PeerIP,omitempty"`
	PeerASN           *int32                   `protobuf:"varint,8,opt,name=PeerASN" json:"PeerASN,omitempty"`
	Timestamp         *string                  `protobuf:"bytes,9,opt,name=Timestamp" json:"Timestamp,omitempty"`
	IGPRouterID       *string                  `protobuf:"bytes,10,opt,name=IGPRouterID" json:"IGPRouterID,omitempty"`
	Protocol          *string                  `protobuf:"bytes,11,opt,name=Protocol" json:"Protocol,omitempty"`
	AreaID            *string                  `protobuf:"bytes,12,opt,name=AreaID" json:"AreaID,omitempty"`
	Nexthop           *string                  `protobuf:"bytes,13,opt,name=Nexthop" json:"Nexthop,omitempty"`
	MTID              *MultiTopologyIdentifier `protobuf:"bytes,14,opt,name=MTID" json:"MTID,omitempty"`
	LocalLinkIP       *string                  `protobuf:"bytes,15,opt,name=LocalLinkIP" json:"LocalLinkIP,omitempty"`
	RemoteLinkIP      *string                  `protobuf:"bytes,16,opt,name=RemoteLinkIP" json:"RemoteLinkIP,omitempty"`
	IGPMetric         *uint32                  `protobuf:"varint,17,opt,name=IGPMetric" json:"IGPMetric,omitempty"`
	RemoteNodeHash    *string                  `protobuf:"bytes,18,opt,name=RemoteNodeHash" json:"RemoteNodeHash,omitempty"`
	LocalNodeHash     *string                  `protobuf:"bytes,19,opt,name=LocalNodeHash" json:"LocalNodeHash,omitempty"`
	RemoteIGPRouterID *string                  `protobuf:"bytes,20,opt,name=RemoteIGPRouterID" json:"RemoteIGPRouterID,omitempty"`
}

func (x *LSLink) Reset() {
	*x = LSLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_requestservice_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LSLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LSLink) ProtoMessage() {}

func (x *LSLink) ProtoReflect() protoreflect.Message {
	mi := &file_requestservice_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LSLink.ProtoReflect.Descriptor instead.
func (*LSLink) Descriptor() ([]byte, []int) {
	return file_requestservice_proto_rawDescGZIP(), []int{9}
}

func (x *LSLink) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *LSLink) GetID() string {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return ""
}

func (x *LSLink) GetRouterHash() string {
	if x != nil && x.RouterHash != nil {
		return *x.RouterHash
	}
	return ""
}

func (x *LSLink) GetRouterIP() string {
	if x != nil && x.RouterIP != nil {
		return *x.RouterIP
	}
	return ""
}

func (x *LSLink) GetDomainID() int64 {
	if x != nil && x.DomainID != nil {
		return *x.DomainID
	}
	return 0
}

func (x *LSLink) GetPeerHash() string {
	if x != nil && x.PeerHash != nil {
		return *x.PeerHash
	}
	return ""
}

func (x *LSLink) GetPeerIP() string {
	if x != nil && x.PeerIP != nil {
		return *x.PeerIP
	}
	return ""
}

func (x *LSLink) GetPeerASN() int32 {
	if x != nil && x.PeerASN != nil {
		return *x.PeerASN
	}
	return 0
}

func (x *LSLink) GetTimestamp() string {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return ""
}

func (x *LSLink) GetIGPRouterID() string {
	if x != nil && x.IGPRouterID != nil {
		return *x.IGPRouterID
	}
	return ""
}

func (x *LSLink) GetProtocol() string {
	if x != nil && x.Protocol != nil {
		return *x.Protocol
	}
	return ""
}

func (x *LSLink) GetAreaID() string {
	if x != nil && x.AreaID != nil {
		return *x.AreaID
	}
	return ""
}

func (x *LSLink) GetNexthop() string {
	if x != nil && x.Nexthop != nil {
		return *x.Nexthop
	}
	return ""
}

func (x *LSLink) GetMTID() *MultiTopologyIdentifier {
	if x != nil {
		return x.MTID
	}
	return nil
}

func (x *LSLink) GetLocalLinkIP() string {
	if x != nil && x.LocalLinkIP != nil {
		return *x.LocalLinkIP
	}
	return ""
}

func (x *LSLink) GetRemoteLinkIP() string {
	if x != nil && x.RemoteLinkIP != nil {
		return *x.RemoteLinkIP
	}
	return ""
}

func (x *LSLink) GetIGPMetric() uint32 {
	if x != nil && x.IGPMetric != nil {
		return *x.IGPMetric
	}
	return 0
}

func (x *LSLink) GetRemoteNodeHash() string {
	if x != nil && x.RemoteNodeHash != nil {
		return *x.RemoteNodeHash
	}
	return ""
}

func (x *LSLink) GetLocalNodeHash() string {
	if x != nil && x.LocalNodeHash != nil {
		return *x.LocalNodeHash
	}
	return ""
}

func (x *LSLink) GetRemoteIGPRouterID() string {
	if x != nil && x.RemoteIGPRouterID != nil {
		return *x.RemoteIGPRouterID
	}
	return ""
}

type LSPrefix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key           *string                  `protobuf:"bytes,1,req,name=Key" json:"Key,omitempty"`
	ID            *string                  `protobuf:"bytes,2,opt,name=ID" json:"ID,omitempty"`
	RouterHash    *string                  `protobuf:"bytes,3,opt,name=RouterHash" json:"RouterHash,omitempty"`
	RouterIP      *string                  `protobuf:"bytes,4,opt,name=RouterIP" json:"RouterIP,omitempty"`
	DomainID      *int64                   `protobuf:"varint,5,opt,name=DomainID" json:"DomainID,omitempty"`
	PeerHash      *string                  `protobuf:"bytes,6,opt,name=PeerHash" json:"PeerHash,omitempty"`
	PeerIP        *string                  `protobuf:"bytes,7,opt,name=PeerIP" json:"PeerIP,omitempty"`
	PeerASN       *int32                   `protobuf:"varint,8,opt,name=PeerASN" json:"PeerASN,omitempty"`
	Timestamp     *string                  `protobuf:"bytes,9,opt,name=Timestamp" json:"Timestamp,omitempty"`
	IGPRouterID   *string                  `protobuf:"bytes,10,opt,name=IGPRouterID" json:"IGPRouterID,omitempty"`
	Protocol      *string                  `protobuf:"bytes,11,opt,name=Protocol" json:"Protocol,omitempty"`
	AreaID        *string                  `protobuf:"bytes,12,opt,name=AreaID" json:"AreaID,omitempty"`
	Nexthop       *string                  `protobuf:"bytes,13,opt,name=Nexthop" json:"Nexthop,omitempty"`
	LocalNodeHash *string                  `protobuf:"bytes,14,opt,name=LocalNodeHash" json:"LocalNodeHash,omitempty"`
	MTID          *MultiTopologyIdentifier `protobuf:"bytes,15,opt,name=MTID" json:"MTID,omitempty"`
	Prefix        *string                  `protobuf:"bytes,16,opt,name=Prefix" json:"Prefix,omitempty"`
	PrefixLen     *int32                   `protobuf:"varint,17,opt,name=PrefixLen" json:"PrefixLen,omitempty"`
	PrefixMetric  *uint32                  `protobuf:"varint,18,opt,name=PrefixMetric" json:"PrefixMetric,omitempty"`
	IsPrepolicy   *bool                    `protobuf:"varint,19,opt,name=IsPrepolicy" json:"IsPrepolicy,omitempty"`
	IsAdjRIBIn    *bool                    `protobuf:"varint,20,opt,name=IsAdjRIBIn" json:"IsAdjRIBIn,omitempty"`
}

func (x *LSPrefix) Reset() {
	*x = LSPrefix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_requestservice_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LSPrefix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LSPrefix) ProtoMessage() {}

func (x *LSPrefix) ProtoReflect() protoreflect.Message {
	mi := &file_requestservice_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LSPrefix.ProtoReflect.Descriptor instead.
func (*LSPrefix) Descriptor() ([]byte, []int) {
	return file_requestservice_proto_rawDescGZIP(), []int{10}
}

func (x *LSPrefix) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *LSPrefix) GetID() string {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return ""
}

func (x *LSPrefix) GetRouterHash() string {
	if x != nil && x.RouterHash != nil {
		return *x.RouterHash
	}
	return ""
}

func (x *LSPrefix) GetRouterIP() string {
	if x != nil && x.RouterIP != nil {
		return *x.RouterIP
	}
	return ""
}

func (x *LSPrefix) GetDomainID() int64 {
	if x != nil && x.DomainID != nil {
		return *x.DomainID
	}
	return 0
}

func (x *LSPrefix) GetPeerHash() string {
	if x != nil && x.PeerHash != nil {
		return *x.PeerHash
	}
	return ""
}

func (x *LSPrefix) GetPeerIP() string {
	if x != nil && x.PeerIP != nil {
		return *x.PeerIP
	}
	return ""
}

func (x *LSPrefix) GetPeerASN() int32 {
	if x != nil && x.PeerASN != nil {
		return *x.PeerASN
	}
	return 0
}

func (x *LSPrefix) GetTimestamp() string {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return ""
}

func (x *LSPrefix) GetIGPRouterID() string {
	if x != nil && x.IGPRouterID != nil {
		return *x.IGPRouterID
	}
	return ""
}

func (x *LSPrefix) GetProtocol() string {
	if x != nil && x.Protocol != nil {
		return *x.Protocol
	}
	return ""
}

func (x *LSPrefix) GetAreaID() string {
	if x != nil && x.AreaID != nil {
		return *x.AreaID
	}
	return ""
}

func (x *LSPrefix) GetNexthop() string {
	if x != nil && x.Nexthop != nil {
		return *x.Nexthop
	}
	return ""
}

func (x *LSPrefix) GetLocalNodeHash() string {
	if x != nil && x.LocalNodeHash != nil {
		return *x.LocalNodeHash
	}
	return ""
}

func (x *LSPrefix) GetMTID() *MultiTopologyIdentifier {
	if x != nil {
		return x.MTID
	}
	return nil
}

func (x *LSPrefix) GetPrefix() string {
	if x != nil && x.Prefix != nil {
		return *x.Prefix
	}
	return ""
}

func (x *LSPrefix) GetPrefixLen() int32 {
	if x != nil && x.PrefixLen != nil {
		return *x.PrefixLen
	}
	return 0
}

func (x *LSPrefix) GetPrefixMetric() uint32 {
	if x != nil && x.PrefixMetric != nil {
		return *x.PrefixMetric
	}
	return 0
}

func (x *LSPrefix) GetIsPrepolicy() bool {
	if x != nil && x.IsPrepolicy != nil {
		return *x.IsPrepolicy
	}
	return false
}

func (x *LSPrefix) GetIsAdjRIBIn() bool {
	if x != nil && x.IsAdjRIBIn != nil {
		return *x.IsAdjRIBIn
	}
	return false
}

type LSSRv6SID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key           *string                  `protobuf:"bytes,1,req,name=Key" json:"Key,omitempty"`
	ID            *string                  `protobuf:"bytes,2,opt,name=ID" json:"ID,omitempty"`
	RouterHash    *string                  `protobuf:"bytes,3,opt,name=RouterHash" json:"RouterHash,omitempty"`
	RouterIP      *string                  `protobuf:"bytes,4,opt,name=RouterIP" json:"RouterIP,omitempty"`
	DomainID      *int64                   `protobuf:"varint,5,opt,name=DomainID" json:"DomainID,omitempty"`
	PeerHash      *string                  `protobuf:"bytes,6,opt,name=PeerHash" json:"PeerHash,omitempty"`
	PeerIP        *string                  `protobuf:"bytes,7,opt,name=PeerIP" json:"PeerIP,omitempty"`
	PeerASN       *int32                   `protobuf:"varint,8,opt,name=PeerASN" json:"PeerASN,omitempty"`
	Timestamp     *string                  `protobuf:"bytes,9,opt,name=Timestamp" json:"Timestamp,omitempty"`
	IGPRouterID   *string                  `protobuf:"bytes,10,opt,name=IGPRouterID" json:"IGPRouterID,omitempty"`
	LocalNodeASN  *uint32                  `protobuf:"varint,11,opt,name=LocalNodeASN" json:"LocalNodeASN,omitempty"`
	Protocol      *string                  `protobuf:"bytes,12,opt,name=Protocol" json:"Protocol,omitempty"`
	Nexthop       *string                  `protobuf:"bytes,13,opt,name=Nexthop" json:"Nexthop,omitempty"`
	LocalNodeHash *string                  `protobuf:"bytes,14,opt,name=LocalNodeHash" json:"LocalNodeHash,omitempty"`
	MTID          *MultiTopologyIdentifier `protobuf:"bytes,15,opt,name=MTID" json:"MTID,omitempty"`
	IGPFlags      *uint32                  `protobuf:"varint,16,opt,name=IGPFlags" json:"IGPFlags,omitempty"` // protobuf does not support uint8
	IsPrepolicy   *bool                    `protobuf:"varint,17,opt,name=IsPrepolicy" json:"IsPrepolicy,omitempty"`
	IsAdjRIBIn    *bool                    `protobuf:"varint,18,opt,name=IsAdjRIBIn" json:"IsAdjRIBIn,omitempty"`
	SRv6SID       *string                  `protobuf:"bytes,19,opt,name=SRv6SID" json:"SRv6SID,omitempty"`
}

func (x *LSSRv6SID) Reset() {
	*x = LSSRv6SID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_requestservice_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LSSRv6SID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LSSRv6SID) ProtoMessage() {}

func (x *LSSRv6SID) ProtoReflect() protoreflect.Message {
	mi := &file_requestservice_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LSSRv6SID.ProtoReflect.Descriptor instead.
func (*LSSRv6SID) Descriptor() ([]byte, []int) {
	return file_requestservice_proto_rawDescGZIP(), []int{11}
}

func (x *LSSRv6SID) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *LSSRv6SID) GetID() string {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return ""
}

func (x *LSSRv6SID) GetRouterHash() string {
	if x != nil && x.RouterHash != nil {
		return *x.RouterHash
	}
	return ""
}

func (x *LSSRv6SID) GetRouterIP() string {
	if x != nil && x.RouterIP != nil {
		return *x.RouterIP
	}
	return ""
}

func (x *LSSRv6SID) GetDomainID() int64 {
	if x != nil && x.DomainID != nil {
		return *x.DomainID
	}
	return 0
}

func (x *LSSRv6SID) GetPeerHash() string {
	if x != nil && x.PeerHash != nil {
		return *x.PeerHash
	}
	return ""
}

func (x *LSSRv6SID) GetPeerIP() string {
	if x != nil && x.PeerIP != nil {
		return *x.PeerIP
	}
	return ""
}

func (x *LSSRv6SID) GetPeerASN() int32 {
	if x != nil && x.PeerASN != nil {
		return *x.PeerASN
	}
	return 0
}

func (x *LSSRv6SID) GetTimestamp() string {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return ""
}

func (x *LSSRv6SID) GetIGPRouterID() string {
	if x != nil && x.IGPRouterID != nil {
		return *x.IGPRouterID
	}
	return ""
}

func (x *LSSRv6SID) GetLocalNodeASN() uint32 {
	if x != nil && x.LocalNodeASN != nil {
		return *x.LocalNodeASN
	}
	return 0
}

func (x *LSSRv6SID) GetProtocol() string {
	if x != nil && x.Protocol != nil {
		return *x.Protocol
	}
	return ""
}

func (x *LSSRv6SID) GetNexthop() string {
	if x != nil && x.Nexthop != nil {
		return *x.Nexthop
	}
	return ""
}

func (x *LSSRv6SID) GetLocalNodeHash() string {
	if x != nil && x.LocalNodeHash != nil {
		return *x.LocalNodeHash
	}
	return ""
}

func (x *LSSRv6SID) GetMTID() *MultiTopologyIdentifier {
	if x != nil {
		return x.MTID
	}
	return nil
}

func (x *LSSRv6SID) GetIGPFlags() uint32 {
	if x != nil && x.IGPFlags != nil {
		return *x.IGPFlags
	}
	return 0
}

func (x *LSSRv6SID) GetIsPrepolicy() bool {
	if x != nil && x.IsPrepolicy != nil {
		return *x.IsPrepolicy
	}
	return false
}

func (x *LSSRv6SID) GetIsAdjRIBIn() bool {
	if x != nil && x.IsAdjRIBIn != nil {
		return *x.IsAdjRIBIn
	}
	return false
}

func (x *LSSRv6SID) GetSRv6SID() string {
	if x != nil && x.SRv6SID != nil {
		return *x.SRv6SID
	}
	return ""
}

type MultiTopologyIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OFlag *bool   `protobuf:"varint,1,req,name=OFlag" json:"OFlag,omitempty"`
	AFlag *bool   `protobuf:"varint,2,req,name=AFlag" json:"AFlag,omitempty"`
	MTID  *uint32 `protobuf:"varint,3,req,name=MTID" json:"MTID,omitempty"` // protobuf does not support uint16
}

func (x *MultiTopologyIdentifier) Reset() {
	*x = MultiTopologyIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_requestservice_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiTopologyIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiTopologyIdentifier) ProtoMessage() {}

func (x *MultiTopologyIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_requestservice_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiTopologyIdentifier.ProtoReflect.Descriptor instead.
func (*MultiTopologyIdentifier) Descriptor() ([]byte, []int) {
	return file_requestservice_proto_rawDescGZIP(), []int{12}
}

func (x *MultiTopologyIdentifier) GetOFlag() bool {
	if x != nil && x.OFlag != nil {
		return *x.OFlag
	}
	return false
}

func (x *MultiTopologyIdentifier) GetAFlag() bool {
	if x != nil && x.AFlag != nil {
		return *x.AFlag
	}
	return false
}

func (x *MultiTopologyIdentifier) GetMTID() uint32 {
	if x != nil && x.MTID != nil {
		return *x.MTID
	}
	return 0
}

var File_requestservice_proto protoreflect.FileDescriptor

var file_requestservice_proto_rawDesc = []byte{
	0x0a, 0x14, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x4b, 0x0a, 0x0f, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x24, 0x0a,
	0x0d, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x22, 0x5e, 0x0a, 0x10, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x70, 0x76, 0x34, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d,
	0x69, 0x70, 0x76, 0x34, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x24, 0x0a,
	0x0d, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x22, 0x42, 0x0a, 0x0e, 0x4c, 0x53, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x6c, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x53, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07,
	0x6c, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x42, 0x0a, 0x0e, 0x4c, 0x53, 0x4c, 0x69, 0x6e,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x6c, 0x73, 0x4c,
	0x69, 0x6e, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x53, 0x4c, 0x69,
	0x6e, 0x6b, 0x52, 0x07, 0x6c, 0x73, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x22, 0x4c, 0x0a, 0x10, 0x4c,
	0x53, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x38, 0x0a, 0x0a, 0x6c, 0x73, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x53, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x0a, 0x6c,
	0x73, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x22, 0x4e, 0x0a, 0x11, 0x4c, 0x53, 0x53,
	0x52, 0x76, 0x36, 0x53, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39,
	0x0a, 0x0a, 0x6c, 0x73, 0x53, 0x52, 0x76, 0x36, 0x53, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x4c, 0x53, 0x53, 0x52, 0x76, 0x36, 0x53, 0x49, 0x44, 0x52, 0x0a, 0x6c,
	0x73, 0x53, 0x52, 0x76, 0x36, 0x53, 0x49, 0x44, 0x73, 0x22, 0x58, 0x0a, 0x11, 0x54, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43,
	0x0a, 0x0d, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x44,
	0x61, 0x74, 0x61, 0x22, 0xe9, 0x01, 0x0a, 0x0d, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x70, 0x76, 0x34, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x34,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x53, 0x65,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x89, 0x04, 0x0a, 0x06, 0x4c, 0x53, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x49, 0x50, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x49, 0x50, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x65, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x65, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x16, 0x0a, 0x06, 0x50, 0x65, 0x65, 0x72, 0x49, 0x50, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x50, 0x65, 0x65, 0x72, 0x49, 0x50, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x65, 0x65, 0x72,
	0x41, 0x53, 0x4e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x50, 0x65, 0x65, 0x72, 0x41,
	0x53, 0x4e, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x20, 0x0a, 0x0b, 0x49, 0x47, 0x50, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x49, 0x47, 0x50, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x41, 0x53, 0x4e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x41, 0x53, 0x4e, 0x12, 0x3b, 0x0a, 0x04, 0x4d, 0x54, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x04, 0x4d, 0x54, 0x49,
	0x44, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x72, 0x65, 0x61, 0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x41, 0x72, 0x65, 0x61, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x49, 0x44, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x73, 0x50,
	0x72, 0x65, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x49, 0x73, 0x50, 0x72, 0x65, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x49,
	0x73, 0x41, 0x64, 0x6a, 0x52, 0x49, 0x42, 0x49, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x49, 0x73, 0x41, 0x64, 0x6a, 0x52, 0x49, 0x42, 0x49, 0x6e, 0x22, 0xfb, 0x04, 0x0a, 0x06,
	0x4c, 0x53, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x49, 0x50, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x49, 0x50, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x44,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x44,
	0x12, 0x1a, 0x0a, 0x08, 0x50, 0x65, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x50, 0x65, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06,
	0x50, 0x65, 0x65, 0x72, 0x49, 0x50, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x50, 0x65,
	0x65, 0x72, 0x49, 0x50, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x65, 0x65, 0x72, 0x41, 0x53, 0x4e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x50, 0x65, 0x65, 0x72, 0x41, 0x53, 0x4e, 0x12, 0x1c,
	0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x20, 0x0a, 0x0b,
	0x49, 0x47, 0x50, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x49, 0x47, 0x50, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a,
	0x0a, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x72,
	0x65, 0x61, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x72, 0x65, 0x61,
	0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x12, 0x3b, 0x0a, 0x04,
	0x4d, 0x54, 0x49, 0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x52, 0x04, 0x4d, 0x54, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x50, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x50, 0x12, 0x22, 0x0a, 0x0c, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x50, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x50, 0x12,
	0x1c, 0x0a, 0x09, 0x49, 0x47, 0x50, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x49, 0x47, 0x50, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x26, 0x0a,
	0x0e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x61, 0x73, 0x68, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x24, 0x0a, 0x0d, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4e, 0x6f,
	0x64, 0x65, 0x48, 0x61, 0x73, 0x68, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2c, 0x0a, 0x11, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x47, 0x50, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x47,
	0x50, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x44, 0x22, 0xdf, 0x04, 0x0a, 0x08, 0x4c, 0x53,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x49, 0x50, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x49, 0x50, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x44,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x44,
	0x12, 0x1a, 0x0a, 0x08, 0x50, 0x65, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x50, 0x65, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06,
	0x50, 0x65, 0x65, 0x72, 0x49, 0x50, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x50, 0x65,
	0x65, 0x72, 0x49, 0x50, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x65, 0x65, 0x72, 0x41, 0x53, 0x4e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x50, 0x65, 0x65, 0x72, 0x41, 0x53, 0x4e, 0x12, 0x1c,
	0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x20, 0x0a, 0x0b,
	0x49, 0x47, 0x50, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x49, 0x47, 0x50, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a,
	0x0a, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x72,
	0x65, 0x61, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x72, 0x65, 0x61,
	0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x12, 0x24, 0x0a, 0x0d,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x61, 0x73, 0x68, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x3b, 0x0a, 0x04, 0x4d, 0x54, 0x49, 0x44, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x04, 0x4d, 0x54, 0x49, 0x44, 0x12,
	0x16, 0x0a, 0x06, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x4c, 0x65, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x4c, 0x65, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x73, 0x50,
	0x72, 0x65, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x49, 0x73, 0x50, 0x72, 0x65, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x49,
	0x73, 0x41, 0x64, 0x6a, 0x52, 0x49, 0x42, 0x49, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x49, 0x73, 0x41, 0x64, 0x6a, 0x52, 0x49, 0x42, 0x49, 0x6e, 0x22, 0xc8, 0x04, 0x0a, 0x09,
	0x4c, 0x53, 0x53, 0x52, 0x76, 0x36, 0x53, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x50, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x50, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x65, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x65, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x16, 0x0a, 0x06, 0x50, 0x65, 0x65, 0x72, 0x49, 0x50, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x50, 0x65, 0x65, 0x72, 0x49, 0x50, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x65, 0x65, 0x72, 0x41,
	0x53, 0x4e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x50, 0x65, 0x65, 0x72, 0x41, 0x53,
	0x4e, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x20, 0x0a, 0x0b, 0x49, 0x47, 0x50, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x49, 0x47, 0x50, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x22, 0x0a, 0x0c, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x53,
	0x4e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4e, 0x6f,
	0x64, 0x65, 0x41, 0x53, 0x4e, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x12, 0x18, 0x0a, 0x07, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x12, 0x24, 0x0a, 0x0d, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x61, 0x73, 0x68, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x3b, 0x0a, 0x04, 0x4d, 0x54, 0x49, 0x44, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x04, 0x4d, 0x54, 0x49, 0x44, 0x12, 0x1a,
	0x0a, 0x08, 0x49, 0x47, 0x50, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x49, 0x47, 0x50, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x73,
	0x50, 0x72, 0x65, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x49, 0x73, 0x50, 0x72, 0x65, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x1e, 0x0a, 0x0a,
	0x49, 0x73, 0x41, 0x64, 0x6a, 0x52, 0x49, 0x42, 0x49, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x49, 0x73, 0x41, 0x64, 0x6a, 0x52, 0x49, 0x42, 0x49, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x53, 0x52, 0x76, 0x36, 0x53, 0x49, 0x44, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x53,
	0x52, 0x76, 0x36, 0x53, 0x49, 0x44, 0x22, 0x59, 0x0a, 0x17, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x54,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x4f, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08,
	0x52, 0x05, 0x4f, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x46, 0x6c, 0x61, 0x67,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x08, 0x52, 0x05, 0x41, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x12, 0x0a,
	0x04, 0x4d, 0x54, 0x49, 0x44, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x04, 0x4d, 0x54, 0x49,
	0x44, 0x32, 0xba, 0x03, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x4f, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4c, 0x53, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x12, 0x1f, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x53, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4c, 0x53, 0x4c, 0x69,
	0x6e, 0x6b, 0x73, 0x12, 0x1f, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x53, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4c, 0x53, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0x1f, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x53, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0d,
	0x47, 0x65, 0x74, 0x4c, 0x53, 0x53, 0x52, 0x76, 0x36, 0x53, 0x49, 0x44, 0x73, 0x12, 0x1f, 0x2e,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x4c, 0x53, 0x53, 0x52, 0x76, 0x36, 0x53, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x51,
	0x5a, 0x4f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6a, 0x61, 0x6c,
	0x61, 0x70, 0x65, 0x6e, 0x6f, 0x2d, 0x61, 0x70, 0x69, 0x2d, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2f, 0x64, 0x65, 0x6d, 0x6f, 0x2d, 0x73, 0x72, 0x2d, 0x61, 0x70, 0x70, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x3b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65,
}

var (
	file_requestservice_proto_rawDescOnce sync.Once
	file_requestservice_proto_rawDescData = file_requestservice_proto_rawDesc
)

func file_requestservice_proto_rawDescGZIP() []byte {
	file_requestservice_proto_rawDescOnce.Do(func() {
		file_requestservice_proto_rawDescData = protoimpl.X.CompressGZIP(file_requestservice_proto_rawDescData)
	})
	return file_requestservice_proto_rawDescData
}

var file_requestservice_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_requestservice_proto_goTypes = []interface{}{
	(*TopologyRequest)(nil),         // 0: requestservice.TopologyRequest
	(*TelemetryRequest)(nil),        // 1: requestservice.TelemetryRequest
	(*LSNodeResponse)(nil),          // 2: requestservice.LSNodeResponse
	(*LSLinkResponse)(nil),          // 3: requestservice.LSLinkResponse
	(*LSPrefixResponse)(nil),        // 4: requestservice.LSPrefixResponse
	(*LSSRv6SIDResponse)(nil),       // 5: requestservice.LSSRv6SIDResponse
	(*TelemetryResponse)(nil),       // 6: requestservice.TelemetryResponse
	(*TelemetryData)(nil),           // 7: requestservice.TelemetryData
	(*LSNode)(nil),                  // 8: requestservice.LSNode
	(*LSLink)(nil),                  // 9: requestservice.LSLink
	(*LSPrefix)(nil),                // 10: requestservice.LSPrefix
	(*LSSRv6SID)(nil),               // 11: requestservice.LSSRv6SID
	(*MultiTopologyIdentifier)(nil), // 12: requestservice.MultiTopologyIdentifier
}
var file_requestservice_proto_depIdxs = []int32{
	8,  // 0: requestservice.LSNodeResponse.lsNodes:type_name -> requestservice.LSNode
	9,  // 1: requestservice.LSLinkResponse.lsLinks:type_name -> requestservice.LSLink
	10, // 2: requestservice.LSPrefixResponse.lsPrefixes:type_name -> requestservice.LSPrefix
	11, // 3: requestservice.LSSRv6SIDResponse.lsSRv6SIDs:type_name -> requestservice.LSSRv6SID
	7,  // 4: requestservice.TelemetryResponse.telemetryData:type_name -> requestservice.TelemetryData
	12, // 5: requestservice.LSNode.MTID:type_name -> requestservice.MultiTopologyIdentifier
	12, // 6: requestservice.LSLink.MTID:type_name -> requestservice.MultiTopologyIdentifier
	12, // 7: requestservice.LSPrefix.MTID:type_name -> requestservice.MultiTopologyIdentifier
	12, // 8: requestservice.LSSRv6SID.MTID:type_name -> requestservice.MultiTopologyIdentifier
	0,  // 9: requestservice.RequestService.GetLSNodes:input_type -> requestservice.TopologyRequest
	0,  // 10: requestservice.RequestService.GetLSLinks:input_type -> requestservice.TopologyRequest
	0,  // 11: requestservice.RequestService.GetLSPrefixes:input_type -> requestservice.TopologyRequest
	0,  // 12: requestservice.RequestService.GetLSSRv6SIDs:input_type -> requestservice.TopologyRequest
	1,  // 13: requestservice.RequestService.GetTelemetryData:input_type -> requestservice.TelemetryRequest
	2,  // 14: requestservice.RequestService.GetLSNodes:output_type -> requestservice.LSNodeResponse
	3,  // 15: requestservice.RequestService.GetLSLinks:output_type -> requestservice.LSLinkResponse
	4,  // 16: requestservice.RequestService.GetLSPrefixes:output_type -> requestservice.LSPrefixResponse
	5,  // 17: requestservice.RequestService.GetLSSRv6SIDs:output_type -> requestservice.LSSRv6SIDResponse
	6,  // 18: requestservice.RequestService.GetTelemetryData:output_type -> requestservice.TelemetryResponse
	14, // [14:19] is the sub-list for method output_type
	9,  // [9:14] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_requestservice_proto_init() }
func file_requestservice_proto_init() {
	if File_requestservice_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_requestservice_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_requestservice_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_requestservice_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LSNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_requestservice_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LSLinkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_requestservice_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LSPrefixResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_requestservice_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LSSRv6SIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_requestservice_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_requestservice_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetryData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_requestservice_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LSNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_requestservice_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LSLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_requestservice_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LSPrefix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_requestservice_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LSSRv6SID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_requestservice_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiTopologyIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_requestservice_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_requestservice_proto_goTypes,
		DependencyIndexes: file_requestservice_proto_depIdxs,
		MessageInfos:      file_requestservice_proto_msgTypes,
	}.Build()
	File_requestservice_proto = out.File
	file_requestservice_proto_rawDesc = nil
	file_requestservice_proto_goTypes = nil
	file_requestservice_proto_depIdxs = nil
}
