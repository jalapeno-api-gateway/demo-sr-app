// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package requestservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RequestServiceClient is the client API for RequestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RequestServiceClient interface {
	GetLsNodes(ctx context.Context, in *TopologyRequest, opts ...grpc.CallOption) (RequestService_GetLsNodesClient, error)
	GetLsLinks(ctx context.Context, in *TopologyRequest, opts ...grpc.CallOption) (RequestService_GetLsLinksClient, error)
	GetTelemetryData(ctx context.Context, in *TelemetryRequest, opts ...grpc.CallOption) (RequestService_GetTelemetryDataClient, error)
}

type requestServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRequestServiceClient(cc grpc.ClientConnInterface) RequestServiceClient {
	return &requestServiceClient{cc}
}

func (c *requestServiceClient) GetLsNodes(ctx context.Context, in *TopologyRequest, opts ...grpc.CallOption) (RequestService_GetLsNodesClient, error) {
	stream, err := c.cc.NewStream(ctx, &RequestService_ServiceDesc.Streams[0], "/requestservice.RequestService/GetLsNodes", opts...)
	if err != nil {
		return nil, err
	}
	x := &requestServiceGetLsNodesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RequestService_GetLsNodesClient interface {
	Recv() (*LsNode, error)
	grpc.ClientStream
}

type requestServiceGetLsNodesClient struct {
	grpc.ClientStream
}

func (x *requestServiceGetLsNodesClient) Recv() (*LsNode, error) {
	m := new(LsNode)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *requestServiceClient) GetLsLinks(ctx context.Context, in *TopologyRequest, opts ...grpc.CallOption) (RequestService_GetLsLinksClient, error) {
	stream, err := c.cc.NewStream(ctx, &RequestService_ServiceDesc.Streams[1], "/requestservice.RequestService/GetLsLinks", opts...)
	if err != nil {
		return nil, err
	}
	x := &requestServiceGetLsLinksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RequestService_GetLsLinksClient interface {
	Recv() (*LsLink, error)
	grpc.ClientStream
}

type requestServiceGetLsLinksClient struct {
	grpc.ClientStream
}

func (x *requestServiceGetLsLinksClient) Recv() (*LsLink, error) {
	m := new(LsLink)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *requestServiceClient) GetTelemetryData(ctx context.Context, in *TelemetryRequest, opts ...grpc.CallOption) (RequestService_GetTelemetryDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &RequestService_ServiceDesc.Streams[2], "/requestservice.RequestService/GetTelemetryData", opts...)
	if err != nil {
		return nil, err
	}
	x := &requestServiceGetTelemetryDataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RequestService_GetTelemetryDataClient interface {
	Recv() (*TelemetryResponse, error)
	grpc.ClientStream
}

type requestServiceGetTelemetryDataClient struct {
	grpc.ClientStream
}

func (x *requestServiceGetTelemetryDataClient) Recv() (*TelemetryResponse, error) {
	m := new(TelemetryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RequestServiceServer is the server API for RequestService service.
// All implementations must embed UnimplementedRequestServiceServer
// for forward compatibility
type RequestServiceServer interface {
	GetLsNodes(*TopologyRequest, RequestService_GetLsNodesServer) error
	GetLsLinks(*TopologyRequest, RequestService_GetLsLinksServer) error
	GetTelemetryData(*TelemetryRequest, RequestService_GetTelemetryDataServer) error
	mustEmbedUnimplementedRequestServiceServer()
}

// UnimplementedRequestServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRequestServiceServer struct {
}

func (UnimplementedRequestServiceServer) GetLsNodes(*TopologyRequest, RequestService_GetLsNodesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetLsNodes not implemented")
}
func (UnimplementedRequestServiceServer) GetLsLinks(*TopologyRequest, RequestService_GetLsLinksServer) error {
	return status.Errorf(codes.Unimplemented, "method GetLsLinks not implemented")
}
func (UnimplementedRequestServiceServer) GetTelemetryData(*TelemetryRequest, RequestService_GetTelemetryDataServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTelemetryData not implemented")
}
func (UnimplementedRequestServiceServer) mustEmbedUnimplementedRequestServiceServer() {}

// UnsafeRequestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RequestServiceServer will
// result in compilation errors.
type UnsafeRequestServiceServer interface {
	mustEmbedUnimplementedRequestServiceServer()
}

func RegisterRequestServiceServer(s grpc.ServiceRegistrar, srv RequestServiceServer) {
	s.RegisterService(&RequestService_ServiceDesc, srv)
}

func _RequestService_GetLsNodes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TopologyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RequestServiceServer).GetLsNodes(m, &requestServiceGetLsNodesServer{stream})
}

type RequestService_GetLsNodesServer interface {
	Send(*LsNode) error
	grpc.ServerStream
}

type requestServiceGetLsNodesServer struct {
	grpc.ServerStream
}

func (x *requestServiceGetLsNodesServer) Send(m *LsNode) error {
	return x.ServerStream.SendMsg(m)
}

func _RequestService_GetLsLinks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TopologyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RequestServiceServer).GetLsLinks(m, &requestServiceGetLsLinksServer{stream})
}

type RequestService_GetLsLinksServer interface {
	Send(*LsLink) error
	grpc.ServerStream
}

type requestServiceGetLsLinksServer struct {
	grpc.ServerStream
}

func (x *requestServiceGetLsLinksServer) Send(m *LsLink) error {
	return x.ServerStream.SendMsg(m)
}

func _RequestService_GetTelemetryData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TelemetryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RequestServiceServer).GetTelemetryData(m, &requestServiceGetTelemetryDataServer{stream})
}

type RequestService_GetTelemetryDataServer interface {
	Send(*TelemetryResponse) error
	grpc.ServerStream
}

type requestServiceGetTelemetryDataServer struct {
	grpc.ServerStream
}

func (x *requestServiceGetTelemetryDataServer) Send(m *TelemetryResponse) error {
	return x.ServerStream.SendMsg(m)
}

// RequestService_ServiceDesc is the grpc.ServiceDesc for RequestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RequestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "requestservice.RequestService",
	HandlerType: (*RequestServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetLsNodes",
			Handler:       _RequestService_GetLsNodes_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetLsLinks",
			Handler:       _RequestService_GetLsLinks_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetTelemetryData",
			Handler:       _RequestService_GetTelemetryData_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "requestservice.proto",
}
