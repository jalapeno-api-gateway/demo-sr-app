// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package requestservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ApiGatewayClient is the client API for ApiGateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiGatewayClient interface {
	GetLsNodes(ctx context.Context, in *LsNodeRequest, opts ...grpc.CallOption) (ApiGateway_GetLsNodesClient, error)
	GetLsLinks(ctx context.Context, in *LsLinkRequest, opts ...grpc.CallOption) (ApiGateway_GetLsLinksClient, error)
	GetDataRates(ctx context.Context, in *DataRateRequest, opts ...grpc.CallOption) (ApiGateway_GetDataRatesClient, error)
}

type apiGatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewApiGatewayClient(cc grpc.ClientConnInterface) ApiGatewayClient {
	return &apiGatewayClient{cc}
}

func (c *apiGatewayClient) GetLsNodes(ctx context.Context, in *LsNodeRequest, opts ...grpc.CallOption) (ApiGateway_GetLsNodesClient, error) {
	stream, err := c.cc.NewStream(ctx, &ApiGateway_ServiceDesc.Streams[0], "/requestservice.ApiGateway/GetLsNodes", opts...)
	if err != nil {
		return nil, err
	}
	x := &apiGatewayGetLsNodesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ApiGateway_GetLsNodesClient interface {
	Recv() (*LsNode, error)
	grpc.ClientStream
}

type apiGatewayGetLsNodesClient struct {
	grpc.ClientStream
}

func (x *apiGatewayGetLsNodesClient) Recv() (*LsNode, error) {
	m := new(LsNode)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *apiGatewayClient) GetLsLinks(ctx context.Context, in *LsLinkRequest, opts ...grpc.CallOption) (ApiGateway_GetLsLinksClient, error) {
	stream, err := c.cc.NewStream(ctx, &ApiGateway_ServiceDesc.Streams[1], "/requestservice.ApiGateway/GetLsLinks", opts...)
	if err != nil {
		return nil, err
	}
	x := &apiGatewayGetLsLinksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ApiGateway_GetLsLinksClient interface {
	Recv() (*LsLink, error)
	grpc.ClientStream
}

type apiGatewayGetLsLinksClient struct {
	grpc.ClientStream
}

func (x *apiGatewayGetLsLinksClient) Recv() (*LsLink, error) {
	m := new(LsLink)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *apiGatewayClient) GetDataRates(ctx context.Context, in *DataRateRequest, opts ...grpc.CallOption) (ApiGateway_GetDataRatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &ApiGateway_ServiceDesc.Streams[2], "/requestservice.ApiGateway/GetDataRates", opts...)
	if err != nil {
		return nil, err
	}
	x := &apiGatewayGetDataRatesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ApiGateway_GetDataRatesClient interface {
	Recv() (*DataRate, error)
	grpc.ClientStream
}

type apiGatewayGetDataRatesClient struct {
	grpc.ClientStream
}

func (x *apiGatewayGetDataRatesClient) Recv() (*DataRate, error) {
	m := new(DataRate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ApiGatewayServer is the server API for ApiGateway service.
// All implementations must embed UnimplementedApiGatewayServer
// for forward compatibility
type ApiGatewayServer interface {
	GetLsNodes(*LsNodeRequest, ApiGateway_GetLsNodesServer) error
	GetLsLinks(*LsLinkRequest, ApiGateway_GetLsLinksServer) error
	GetDataRates(*DataRateRequest, ApiGateway_GetDataRatesServer) error
	mustEmbedUnimplementedApiGatewayServer()
}

// UnimplementedApiGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedApiGatewayServer struct {
}

func (UnimplementedApiGatewayServer) GetLsNodes(*LsNodeRequest, ApiGateway_GetLsNodesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetLsNodes not implemented")
}
func (UnimplementedApiGatewayServer) GetLsLinks(*LsLinkRequest, ApiGateway_GetLsLinksServer) error {
	return status.Errorf(codes.Unimplemented, "method GetLsLinks not implemented")
}
func (UnimplementedApiGatewayServer) GetDataRates(*DataRateRequest, ApiGateway_GetDataRatesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetDataRates not implemented")
}
func (UnimplementedApiGatewayServer) mustEmbedUnimplementedApiGatewayServer() {}

// UnsafeApiGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiGatewayServer will
// result in compilation errors.
type UnsafeApiGatewayServer interface {
	mustEmbedUnimplementedApiGatewayServer()
}

func RegisterApiGatewayServer(s grpc.ServiceRegistrar, srv ApiGatewayServer) {
	s.RegisterService(&ApiGateway_ServiceDesc, srv)
}

func _ApiGateway_GetLsNodes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LsNodeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApiGatewayServer).GetLsNodes(m, &apiGatewayGetLsNodesServer{stream})
}

type ApiGateway_GetLsNodesServer interface {
	Send(*LsNode) error
	grpc.ServerStream
}

type apiGatewayGetLsNodesServer struct {
	grpc.ServerStream
}

func (x *apiGatewayGetLsNodesServer) Send(m *LsNode) error {
	return x.ServerStream.SendMsg(m)
}

func _ApiGateway_GetLsLinks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LsLinkRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApiGatewayServer).GetLsLinks(m, &apiGatewayGetLsLinksServer{stream})
}

type ApiGateway_GetLsLinksServer interface {
	Send(*LsLink) error
	grpc.ServerStream
}

type apiGatewayGetLsLinksServer struct {
	grpc.ServerStream
}

func (x *apiGatewayGetLsLinksServer) Send(m *LsLink) error {
	return x.ServerStream.SendMsg(m)
}

func _ApiGateway_GetDataRates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DataRateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApiGatewayServer).GetDataRates(m, &apiGatewayGetDataRatesServer{stream})
}

type ApiGateway_GetDataRatesServer interface {
	Send(*DataRate) error
	grpc.ServerStream
}

type apiGatewayGetDataRatesServer struct {
	grpc.ServerStream
}

func (x *apiGatewayGetDataRatesServer) Send(m *DataRate) error {
	return x.ServerStream.SendMsg(m)
}

// ApiGateway_ServiceDesc is the grpc.ServiceDesc for ApiGateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiGateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "requestservice.ApiGateway",
	HandlerType: (*ApiGatewayServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetLsNodes",
			Handler:       _ApiGateway_GetLsNodes_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetLsLinks",
			Handler:       _ApiGateway_GetLsLinks_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetDataRates",
			Handler:       _ApiGateway_GetDataRates_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "requestservice.proto",
}
