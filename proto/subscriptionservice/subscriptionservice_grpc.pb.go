// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package subscriptionservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SubscriptionServiceClient is the client API for SubscriptionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubscriptionServiceClient interface {
	SubscribeToLSNodes(ctx context.Context, in *TopologySubscription, opts ...grpc.CallOption) (SubscriptionService_SubscribeToLSNodesClient, error)
	SubscribeToLSLinks(ctx context.Context, in *TopologySubscription, opts ...grpc.CallOption) (SubscriptionService_SubscribeToLSLinksClient, error)
	SubscribeToLSPrefixes(ctx context.Context, in *TopologySubscription, opts ...grpc.CallOption) (SubscriptionService_SubscribeToLSPrefixesClient, error)
	SubscribeToLSSRv6SIDs(ctx context.Context, in *TopologySubscription, opts ...grpc.CallOption) (SubscriptionService_SubscribeToLSSRv6SIDsClient, error)
	SubscribeToTelemetryData(ctx context.Context, in *TelemetrySubscription, opts ...grpc.CallOption) (SubscriptionService_SubscribeToTelemetryDataClient, error)
}

type subscriptionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSubscriptionServiceClient(cc grpc.ClientConnInterface) SubscriptionServiceClient {
	return &subscriptionServiceClient{cc}
}

func (c *subscriptionServiceClient) SubscribeToLSNodes(ctx context.Context, in *TopologySubscription, opts ...grpc.CallOption) (SubscriptionService_SubscribeToLSNodesClient, error) {
	stream, err := c.cc.NewStream(ctx, &SubscriptionService_ServiceDesc.Streams[0], "/subscriptionservice.SubscriptionService/SubscribeToLSNodes", opts...)
	if err != nil {
		return nil, err
	}
	x := &subscriptionServiceSubscribeToLSNodesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SubscriptionService_SubscribeToLSNodesClient interface {
	Recv() (*LSNodeEvent, error)
	grpc.ClientStream
}

type subscriptionServiceSubscribeToLSNodesClient struct {
	grpc.ClientStream
}

func (x *subscriptionServiceSubscribeToLSNodesClient) Recv() (*LSNodeEvent, error) {
	m := new(LSNodeEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *subscriptionServiceClient) SubscribeToLSLinks(ctx context.Context, in *TopologySubscription, opts ...grpc.CallOption) (SubscriptionService_SubscribeToLSLinksClient, error) {
	stream, err := c.cc.NewStream(ctx, &SubscriptionService_ServiceDesc.Streams[1], "/subscriptionservice.SubscriptionService/SubscribeToLSLinks", opts...)
	if err != nil {
		return nil, err
	}
	x := &subscriptionServiceSubscribeToLSLinksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SubscriptionService_SubscribeToLSLinksClient interface {
	Recv() (*LSLinkEvent, error)
	grpc.ClientStream
}

type subscriptionServiceSubscribeToLSLinksClient struct {
	grpc.ClientStream
}

func (x *subscriptionServiceSubscribeToLSLinksClient) Recv() (*LSLinkEvent, error) {
	m := new(LSLinkEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *subscriptionServiceClient) SubscribeToLSPrefixes(ctx context.Context, in *TopologySubscription, opts ...grpc.CallOption) (SubscriptionService_SubscribeToLSPrefixesClient, error) {
	stream, err := c.cc.NewStream(ctx, &SubscriptionService_ServiceDesc.Streams[2], "/subscriptionservice.SubscriptionService/SubscribeToLSPrefixes", opts...)
	if err != nil {
		return nil, err
	}
	x := &subscriptionServiceSubscribeToLSPrefixesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SubscriptionService_SubscribeToLSPrefixesClient interface {
	Recv() (*LSPrefixEvent, error)
	grpc.ClientStream
}

type subscriptionServiceSubscribeToLSPrefixesClient struct {
	grpc.ClientStream
}

func (x *subscriptionServiceSubscribeToLSPrefixesClient) Recv() (*LSPrefixEvent, error) {
	m := new(LSPrefixEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *subscriptionServiceClient) SubscribeToLSSRv6SIDs(ctx context.Context, in *TopologySubscription, opts ...grpc.CallOption) (SubscriptionService_SubscribeToLSSRv6SIDsClient, error) {
	stream, err := c.cc.NewStream(ctx, &SubscriptionService_ServiceDesc.Streams[3], "/subscriptionservice.SubscriptionService/SubscribeToLSSRv6SIDs", opts...)
	if err != nil {
		return nil, err
	}
	x := &subscriptionServiceSubscribeToLSSRv6SIDsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SubscriptionService_SubscribeToLSSRv6SIDsClient interface {
	Recv() (*LSSRv6SIDEvent, error)
	grpc.ClientStream
}

type subscriptionServiceSubscribeToLSSRv6SIDsClient struct {
	grpc.ClientStream
}

func (x *subscriptionServiceSubscribeToLSSRv6SIDsClient) Recv() (*LSSRv6SIDEvent, error) {
	m := new(LSSRv6SIDEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *subscriptionServiceClient) SubscribeToTelemetryData(ctx context.Context, in *TelemetrySubscription, opts ...grpc.CallOption) (SubscriptionService_SubscribeToTelemetryDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &SubscriptionService_ServiceDesc.Streams[4], "/subscriptionservice.SubscriptionService/SubscribeToTelemetryData", opts...)
	if err != nil {
		return nil, err
	}
	x := &subscriptionServiceSubscribeToTelemetryDataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SubscriptionService_SubscribeToTelemetryDataClient interface {
	Recv() (*TelemetryEvent, error)
	grpc.ClientStream
}

type subscriptionServiceSubscribeToTelemetryDataClient struct {
	grpc.ClientStream
}

func (x *subscriptionServiceSubscribeToTelemetryDataClient) Recv() (*TelemetryEvent, error) {
	m := new(TelemetryEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SubscriptionServiceServer is the server API for SubscriptionService service.
// All implementations must embed UnimplementedSubscriptionServiceServer
// for forward compatibility
type SubscriptionServiceServer interface {
	SubscribeToLSNodes(*TopologySubscription, SubscriptionService_SubscribeToLSNodesServer) error
	SubscribeToLSLinks(*TopologySubscription, SubscriptionService_SubscribeToLSLinksServer) error
	SubscribeToLSPrefixes(*TopologySubscription, SubscriptionService_SubscribeToLSPrefixesServer) error
	SubscribeToLSSRv6SIDs(*TopologySubscription, SubscriptionService_SubscribeToLSSRv6SIDsServer) error
	SubscribeToTelemetryData(*TelemetrySubscription, SubscriptionService_SubscribeToTelemetryDataServer) error
	mustEmbedUnimplementedSubscriptionServiceServer()
}

// UnimplementedSubscriptionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSubscriptionServiceServer struct {
}

func (UnimplementedSubscriptionServiceServer) SubscribeToLSNodes(*TopologySubscription, SubscriptionService_SubscribeToLSNodesServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToLSNodes not implemented")
}
func (UnimplementedSubscriptionServiceServer) SubscribeToLSLinks(*TopologySubscription, SubscriptionService_SubscribeToLSLinksServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToLSLinks not implemented")
}
func (UnimplementedSubscriptionServiceServer) SubscribeToLSPrefixes(*TopologySubscription, SubscriptionService_SubscribeToLSPrefixesServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToLSPrefixes not implemented")
}
func (UnimplementedSubscriptionServiceServer) SubscribeToLSSRv6SIDs(*TopologySubscription, SubscriptionService_SubscribeToLSSRv6SIDsServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToLSSRv6SIDs not implemented")
}
func (UnimplementedSubscriptionServiceServer) SubscribeToTelemetryData(*TelemetrySubscription, SubscriptionService_SubscribeToTelemetryDataServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToTelemetryData not implemented")
}
func (UnimplementedSubscriptionServiceServer) mustEmbedUnimplementedSubscriptionServiceServer() {}

// UnsafeSubscriptionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubscriptionServiceServer will
// result in compilation errors.
type UnsafeSubscriptionServiceServer interface {
	mustEmbedUnimplementedSubscriptionServiceServer()
}

func RegisterSubscriptionServiceServer(s grpc.ServiceRegistrar, srv SubscriptionServiceServer) {
	s.RegisterService(&SubscriptionService_ServiceDesc, srv)
}

func _SubscriptionService_SubscribeToLSNodes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TopologySubscription)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SubscriptionServiceServer).SubscribeToLSNodes(m, &subscriptionServiceSubscribeToLSNodesServer{stream})
}

type SubscriptionService_SubscribeToLSNodesServer interface {
	Send(*LSNodeEvent) error
	grpc.ServerStream
}

type subscriptionServiceSubscribeToLSNodesServer struct {
	grpc.ServerStream
}

func (x *subscriptionServiceSubscribeToLSNodesServer) Send(m *LSNodeEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _SubscriptionService_SubscribeToLSLinks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TopologySubscription)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SubscriptionServiceServer).SubscribeToLSLinks(m, &subscriptionServiceSubscribeToLSLinksServer{stream})
}

type SubscriptionService_SubscribeToLSLinksServer interface {
	Send(*LSLinkEvent) error
	grpc.ServerStream
}

type subscriptionServiceSubscribeToLSLinksServer struct {
	grpc.ServerStream
}

func (x *subscriptionServiceSubscribeToLSLinksServer) Send(m *LSLinkEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _SubscriptionService_SubscribeToLSPrefixes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TopologySubscription)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SubscriptionServiceServer).SubscribeToLSPrefixes(m, &subscriptionServiceSubscribeToLSPrefixesServer{stream})
}

type SubscriptionService_SubscribeToLSPrefixesServer interface {
	Send(*LSPrefixEvent) error
	grpc.ServerStream
}

type subscriptionServiceSubscribeToLSPrefixesServer struct {
	grpc.ServerStream
}

func (x *subscriptionServiceSubscribeToLSPrefixesServer) Send(m *LSPrefixEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _SubscriptionService_SubscribeToLSSRv6SIDs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TopologySubscription)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SubscriptionServiceServer).SubscribeToLSSRv6SIDs(m, &subscriptionServiceSubscribeToLSSRv6SIDsServer{stream})
}

type SubscriptionService_SubscribeToLSSRv6SIDsServer interface {
	Send(*LSSRv6SIDEvent) error
	grpc.ServerStream
}

type subscriptionServiceSubscribeToLSSRv6SIDsServer struct {
	grpc.ServerStream
}

func (x *subscriptionServiceSubscribeToLSSRv6SIDsServer) Send(m *LSSRv6SIDEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _SubscriptionService_SubscribeToTelemetryData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TelemetrySubscription)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SubscriptionServiceServer).SubscribeToTelemetryData(m, &subscriptionServiceSubscribeToTelemetryDataServer{stream})
}

type SubscriptionService_SubscribeToTelemetryDataServer interface {
	Send(*TelemetryEvent) error
	grpc.ServerStream
}

type subscriptionServiceSubscribeToTelemetryDataServer struct {
	grpc.ServerStream
}

func (x *subscriptionServiceSubscribeToTelemetryDataServer) Send(m *TelemetryEvent) error {
	return x.ServerStream.SendMsg(m)
}

// SubscriptionService_ServiceDesc is the grpc.ServiceDesc for SubscriptionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SubscriptionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "subscriptionservice.SubscriptionService",
	HandlerType: (*SubscriptionServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeToLSNodes",
			Handler:       _SubscriptionService_SubscribeToLSNodes_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeToLSLinks",
			Handler:       _SubscriptionService_SubscribeToLSLinks_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeToLSPrefixes",
			Handler:       _SubscriptionService_SubscribeToLSPrefixes_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeToLSSRv6SIDs",
			Handler:       _SubscriptionService_SubscribeToLSSRv6SIDs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeToTelemetryData",
			Handler:       _SubscriptionService_SubscribeToTelemetryData_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "subscriptionservice.proto",
}
